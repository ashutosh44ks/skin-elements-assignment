import { useProducts } from "@/hooks/useProducts";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Navigate, useNavigate } from "react-router";
import MetricCard from "@/components/MetricCard";
import {
  IconCreditCard,
  IconCurrencyDollar,
  IconPercentage,
  IconTrendingUp,
} from "@tabler/icons-react";

import ChartPieDonut from "@/components/ChartPieDonut";
import ChartCard from "@/components/ChartCard";
import ChartBarDefault from "@/components/ChartBarDefault";

export default function Dashboard() {
  const { products, totals } = useProducts();
  const navigate = useNavigate();
  if (!products) return <Navigate to="/data-hydrator" replace />;
  return (
    <div className="flex-1">
      <div className="flex flex-wrap gap-4 mb-4">
        <MetricCard
          label="Total Sales"
          value={totals.sales}
          icon={<IconTrendingUp />}
          className="flex-1"
          change="10%"
          changeType="positive"
          prefix="$"
        />
        <MetricCard
          label="Total Profit"
          value={totals.profit}
          icon={<IconCurrencyDollar />}
          className="flex-1"
          change="5%"
          changeType="positive"
          prefix="$"
        />
        <MetricCard
          label="Total Credit"
          value={totals.credit}
          icon={<IconCreditCard />}
          className="flex-1"
          change="10%"
          changeType="negative"
          prefix="$"
        />
        <MetricCard
          label="Profit %"
          value={totals.profitPercentage}
          icon={<IconPercentage />}
          className="flex-1"
          change="2%"
          changeType="positive"
          suffix="%"
        />
      </div>
      <div className="flex flex-wrap gap-4 mb-8 flex-col md:flex-row">
        <div className="flex-1">
          <ChartCard
            title="Total Sales by Product"
            description="A breakdown of total sales contributed by each product."
            footer="Each slice represents a product's share of total sales."
          >
            <ChartPieDonut
              chartData={products.map((p, i) => ({
                name: p.name,
                value: p.sales,
                fill: `var(--chart-${(i % 6) + 1})`,
              }))}
              chartConfig={products.reduce(
                (
                  acc: Record<string, { label: string; color: string }>,
                  p,
                  i
                ) => {
                  acc[p.name] = {
                    label: p.name,
                    color: `var(--chart-${(i % 6) + 1})`,
                  };
                  return acc;
                },
                {} as Record<string, { label: string; color: string }>
              )}
              dataKey="value"
              nameKey="name"
            />
          </ChartCard>
        </div>
        <div className="flex-1">
          <ChartCard
            title="Profit Comparison"
            description="Compare the profit generated by each product."
            footer="Bar height represents the profit for each product."
          >
            <ChartBarDefault
              chartData={products.map((p, i) => ({
                name: p.name,
                value: p.sales,
                fill: `var(--chart-${(i % 6) + 1})`,
              }))}
              chartConfig={products.reduce(
                (
                  acc: Record<string, { label: string; color: string }>,
                  p,
                  i
                ) => {
                  acc[p.name] = {
                    label: p.name,
                    color: `var(--chart-${(i % 6) + 1})`,
                  };
                  return acc;
                },
                {} as Record<string, { label: string; color: string }>
              )}
              dataKey="value"
              nameKey="name"
            />
          </ChartCard>
        </div>
      </div>
      <h2 className="text-2xl font-medium mb-4">Recent Products</h2>
      <Table>
        <TableCaption>A list of your recent products.</TableCaption>
        <TableHeader>
          <TableRow>
            <TableHead>Name</TableHead>
            <TableHead>Sales</TableHead>
            <TableHead>Profit</TableHead>
            <TableHead>TE</TableHead>
            <TableHead>Credit</TableHead>
            <TableHead>Amazon Fee</TableHead>
            <TableHead className="text-right">Profit %</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {products.length === 0 && (
            <TableRow>
              <TableCell colSpan={7} className="text-center">
                No products found
              </TableCell>
            </TableRow>
          )}
          {products.map((product) => (
            <TableRow
              key={product.id}
              className="cursor-pointer"
              onClick={() => navigate(`/products/${product.id}`)}
            >
              <TableCell className="font-medium">{product.name}</TableCell>
              <TableCell>{product.sales}</TableCell>
              <TableCell>{product.profit}</TableCell>
              <TableCell>{product.te}</TableCell>
              <TableCell>{product.credit}</TableCell>
              <TableCell>{product.amazonFee}</TableCell>
              <TableCell className="text-right">
                {product.profitPercentage}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
